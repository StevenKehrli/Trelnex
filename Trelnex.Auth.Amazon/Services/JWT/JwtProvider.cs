using JWT.Algorithms;
using JWT.Builder;
using Trelnex.Core.Identity;

namespace Trelnex.Auth.Amazon.Services.JWT;

/// <summary>
/// Defines operations for generating JSON Web Tokens (JWT) for caller identities.
/// </summary>
/// <remarks>
/// This interface is used to abstract the JWT generation process, allowing for
/// different implementations of token providers. It enables the separation of token
/// generation logic from the authentication flow, facilitating different signing
/// algorithms and token formats while maintaining a consistent API.
///
/// Implementations of this interface are responsible for:
/// - Constructing properly formatted JWT tokens
/// - Including standard and custom claims
/// - Signing tokens with appropriate algorithms
/// - Setting correct expiration and refresh times
/// </remarks>
public interface IJwtProvider
{
    /// <summary>
    /// Encodes a JWT token for the specified caller identity.
    /// </summary>
    /// <param name="audience">The audience of the token (the intended recipient).</param>
    /// <param name="principalId">The ARN of the caller (used for oid and sub claims).</param>
    /// <param name="scopes">The scopes of the token defining access permissions.</param>
    /// <param name="roles">The roles assigned to the caller identity to be encoded as the roles claim.</param>
    /// <returns>An <see cref="AccessToken"/> containing the JWT token and expiration information.</returns>
    /// <remarks>
    /// The generated token includes the following standard JWT claims:
    /// - iss (issuer): The entity that issued the token
    /// - aud (audience): The intended recipient of the token
    /// - exp (expiration time): The time after which the token expires
    /// - nbf (not before): The time before which the token must not be accepted
    /// - iat (issued at): The time at which the token was issued
    /// - sub (subject): The principal who is the subject of the token (set to principalId)
    ///
    /// And custom claims:
    /// - oid (object identifier): The principal identifier (set to principalId)
    /// - scp (scope): Space-delimited list of permissions the token grants
    /// - roles: Array of role names assigned to the principal
    /// </remarks>
    AccessToken Encode(
        string audience,
        string principalId,
        string[] scopes,
        string[] roles);
}

/// <summary>
/// Provides functionality for generating JSON Web Tokens (JWT) using a specified algorithm.
/// </summary>
/// <remarks>
/// This implementation uses the JWT.NET library for token generation and supports
/// configurable expiration times with automatic refresh windows. It generates tokens
/// that conform to the OAuth 2.0 and OpenID Connect standards, with additional custom
/// claims for authorization purposes.
///
/// The tokens generated by this provider include:
/// - Standard JWT header with algorithm information and key ID
/// - Standard JWT claims (iss, aud, exp, nbf, iat, sub)
/// - Custom claims for authorization (scp, roles, oid)
/// - Configurable expiration times with refresh windows
///
/// This provider is typically used with AWS KMS for signing operations through the
/// <see cref="KMSAlgorithm"/> implementation.
/// </remarks>
internal class JwtProvider : IJwtProvider
{
    #region Private Fields

    /// <summary>
    /// The JWT algorithm used for signing the token.
    /// </summary>
    /// <remarks>
    /// This is typically an instance of <see cref="KMSAlgorithm"/> which uses
    /// AWS Key Management Service for cryptographic operations.
    /// </remarks>
    private readonly IJwtAlgorithm _jwtAlgorithm;

    /// <summary>
    /// The key identifier used in the JWT header.
    /// </summary>
    /// <remarks>
    /// This value is included in the 'kid' header parameter and allows token
    /// validators to identify which key was used to sign the token, facilitating
    /// key rotation scenarios.
    /// </remarks>
    private readonly string _keyId;

    /// <summary>
    /// The issuer claim value for the JWT.
    /// </summary>
    /// <remarks>
    /// The issuer identifies the principal that issued the JWT, typically
    /// a URL or URI that uniquely identifies the token issuing service.
    /// This value appears in the 'iss' claim.
    /// </remarks>
    private readonly string _issuer;

    /// <summary>
    /// The expiration time of the JWT token in minutes.
    /// </summary>
    /// <remarks>
    /// Determines how long the token remains valid after issuance.
    /// A minimum of 15 minutes is enforced to balance security and usability.
    /// </remarks>
    private readonly int _expirationInMinutes;

    /// <summary>
    /// The time in minutes when token refresh should occur.
    /// </summary>
    /// <remarks>
    /// Calculated as 5 minutes before expiration, this value helps clients
    /// proactively refresh their tokens before they expire to maintain
    /// continuous access.
    /// </remarks>
    private readonly int _refreshInMinutes;

    #endregion

    #region Constructors

    /// <summary>
    /// Creates a new instance of the <see cref="JwtProvider"/>.
    /// </summary>
    /// <param name="jwtAlgorithm">The JWT algorithm to use for signing the token.</param>
    /// <param name="keyId">The key ID to use in the JWT header.</param>
    /// <param name="issuer">The issuer claim value for the JWT.</param>
    /// <param name="expirationInMinutes">The expiration time of the JWT token in minutes (minimum 15).</param>
    /// <remarks>
    /// This constructor initializes a new JWT provider with the specified algorithm and parameters.
    /// It enforces a minimum expiration time of 15 minutes and automatically calculates the
    /// refresh time as 5 minutes before expiration.
    /// </remarks>
    public JwtProvider(
        IJwtAlgorithm jwtAlgorithm,
        string keyId,
        string issuer,
        int expirationInMinutes)
    {
        // Set the JWT algorithm.
        _jwtAlgorithm = jwtAlgorithm;

        // Set the key ID.
        _keyId = keyId;

        // Set the issuer.
        _issuer = issuer;

        // Expiration is a minimum of 15 minutes; refresh is 5 minutes before expiration.
        _expirationInMinutes = Math.Max(15, expirationInMinutes);
        _refreshInMinutes = _expirationInMinutes - 5;
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// Encodes a JWT token for the specified caller identity.
    /// </summary>
    /// <param name="audience">The audience of the token (the intended recipient).</param>
    /// <param name="principalId">The ARN of the caller (used for oid and sub claims).</param>
    /// <param name="scopes">The scopes of the token defining access permissions.</param>
    /// <param name="roles">The roles assigned to the caller identity to be encoded as the roles claim.</param>
    /// <returns>An <see cref="AccessToken"/> containing the JWT token and expiration information.</returns>
    /// <remarks>
    /// This method constructs a complete JWT with the following components:
    ///
    /// 1. Header:
    ///    - alg: The algorithm used for signing (from the injected IJwtAlgorithm)
    ///    - kid: Key ID for identifying which key was used for signing
    ///
    /// 2. Standard Claims:
    ///    - iss (issuer): The entity that issued the token (from constructor)
    ///    - aud (audience): The intended recipient of the token (from parameter)
    ///    - exp (expiration time): When the token expires (now + expirationInMinutes)
    ///    - nbf (not before): When the token starts being valid (now)
    ///    - iat (issued at): When the token was issued (now)
    ///    - sub (subject): Principal identifier (from principalId parameter)
    ///
    /// 3. Custom Claims:
    ///    - oid: Object identifier, set to the principalId
    ///    - scp: Space-delimited list of permission scopes
    ///    - roles: Array of role names assigned to the principal
    ///
    /// The returned AccessToken includes both the JWT string and metadata about
    /// expiration and refresh times to assist the client in token management.
    /// </remarks>
    public AccessToken Encode(
        string audience,
        string principalId,
        string[] scopes,
        string[] roles)
    {
        // Create the JWT builder.
        var jwtBuilder = JwtBuilder
            .Create()
            .WithAlgorithm(_jwtAlgorithm) // Set the signing algorithm.
            .AddHeader(HeaderName.KeyId, _keyId); // Add the key ID to the header.

        // Set the issuer.
        jwtBuilder.Issuer(_issuer);

        // Get the current date time.
        var dateTime = DateTime.UtcNow;

        // Calculate the expiration and refresh times.
        var expiresOn = dateTime.AddMinutes(_expirationInMinutes);
        var refreshOn = dateTime.AddMinutes(_refreshInMinutes);

        // Set the issued at, not before, and expiration time.
        jwtBuilder
            .IssuedAt(dateTime)
            .NotBefore(dateTime)
            .ExpirationTime(expiresOn);

        // Set the audience.
        jwtBuilder.Audience(audience);

        // Add the scopes.
        var scp = string.Join(" ", scopes);
        jwtBuilder.AddClaim("scp", scp);

        // Add the roles.
        jwtBuilder.AddClaim("roles", roles);

        // Add the principalId as the oid and sub claims.
        jwtBuilder
            .AddClaim("oid", principalId)
            .AddClaim("sub", principalId);

        // Encode the JWT token.
        var token = jwtBuilder.Encode();

        // Return the access token.
        return new AccessToken()
        {
            Token = token,
            ExpiresOn = expiresOn,
            RefreshOn = refreshOn,
            TokenType = "Bearer"
        };
    }

    #endregion
}
