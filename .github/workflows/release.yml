name: Release

run-name: Release ${{ github.event.inputs.project }} - ${{ github.event.inputs.release_type }}

concurrency:
  group: release-${{ github.event.inputs.project }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      project:
        description: "The project to build."
        required: true
        type: choice
        options:
          - Trelnex.Auth.Amazon
          - Trelnex.Auth.Amazon.Admin
          - Trelnex.Auth.Amazon.Token
          - Trelnex.Core
          - Trelnex.Core.Amazon
          - Trelnex.Core.Api
          - Trelnex.Core.Azure
          - Trelnex.Core.Data
      release_type:
        description: "The release type. The semver and tag will be automatically created."
        required: true
        type: choice
        default: minor
        options:
          - major
          - minor
          - patch

jobs:

  create-matrix:
    name: Create the Build Matrix

    if: (github.ref == 'refs/heads/main')

    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      run_build: ${{ steps.set-matrix.outputs.run_build }}

    steps:

      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: read projects
        id: read-projects
        run: echo "projects=$(jq -c . .github/workflows/projects.json)" >> $GITHUB_OUTPUT

      - name: set matrix
        id: set-matrix
        run: |
          PROJECTS='${{ steps.read-projects.outputs.projects }}'
          PROJECT='${{ github.event.inputs.project }}'

          echo "projects=$PROJECTS"
          echo "project=$PROJECT"

          # filter the projects to the input project
          BUILD_PROJECTS=$(echo "$PROJECTS" | jq -r --arg project "$PROJECT" '
            [ .projects[] |
              select(.name == $project) |
              select(.workflows | contains(["nuget"])) |
            {
              name: .name,
              dotnet_version: .dotnet_version,
              tests: .tests,
              tag_prefix: .tag_prefix
            } ]
          ')

          RUN_BUILD=$(echo "$BUILD_PROJECTS" | jq -r 'length > 0')
          echo "run_build=$RUN_BUILD" >> $GITHUB_OUTPUT

          echo "matrix={\"component\":$(echo $BUILD_PROJECTS)}" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.component.name }}

    needs: create-matrix

    if: ${{ needs.create-matrix.outputs.run_build == 'true' }}

    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJson(needs.create-matrix.outputs.matrix) }}
      fail-fast: false

    steps:

      - name: checkout
        uses: actions/checkout@v4

      - name: setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.component.dotnet_version }}

      - name: dotnet nuget add source
        run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name "github" "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: dotnet restore project
        run: dotnet restore ${{ matrix.component.name }}/${{ matrix.component.name }}.csproj

      - name: dotnet build
        run: dotnet build ${{ matrix.component.name }}/${{ matrix.component.name }}.csproj --no-restore --configuration Release

      - name: dotnet restore test
        if: ${{ matrix.component.tests != null }}
        run: dotnet restore ${{ matrix.component.tests }}/${{ matrix.component.tests }}.csproj

      - name: dotnet test
        if: ${{ matrix.component.tests != null }}
        run: dotnet test ${{ matrix.component.tests }}/${{ matrix.component.tests }}.csproj --no-restore --logger html --results-directory "TestResults.${{ matrix.component.tests }}"

      - name: upload dotnet test results
        if: ${{ always() && matrix.component.tests != null }}
        uses: actions/upload-artifact@v4
        with:
          name: TestResults.${{ matrix.component.tests }}
          path: TestResults.${{ matrix.component.tests }}
          retention-days: 14

      - name: bump version and push tag
        if: success()
        id: tag_version
        uses: StevenKehrli/Trelnex.MonoTag@v1.0.0
        with:
          project_path: ${{ matrix.component.name }}
          tag_prefix: ${{ matrix.component.tag_prefix }}
          tag_part: ${{ github.event.inputs.release_type }}

      - name: dotnet pack
        if: success() && steps.tag_version.outcome == 'success'
        run: dotnet pack ${{ matrix.component.name }}/${{ matrix.component.name }}.csproj --no-restore -p:PackageVersion=${{ steps.tag_version.outputs.new_semver }} -p:ContinuousIntegrationBuild=true

      - name: dotnet nuget push
        if: success() && steps.tag_version.outcome == 'success'
        run: dotnet nuget push "${{ matrix.component.name }}/bin/Release/${{ matrix.component.name }}.${{ steps.tag_version.outputs.new_semver }}.nupkg" --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
