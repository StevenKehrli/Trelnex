using Trelnex.Core.Identity;

namespace Trelnex.Core.Api.Tests;

/// <summary>
/// A test implementation of the <see cref="IAccessTokenProvider"/> interface that supplies
/// pre-configured access tokens for client authentication testing.
///
/// This class serves as a bridge between the token generation system (TestJwtProvider) and
/// the client testing framework (TestClient1/BaseClient). It enables tests to simulate
/// authenticated API calls with specific tokens, without needing to implement a full
/// token acquisition flow. It serves the following purposes:
///
/// 1. Token Provision - Supplies a pre-configured AccessToken when requested by the client
///    through the GetAccessToken method, avoiding the need for actual token acquisition logic
///
/// 2. Scope Association - Maintains the relationship between the token and its intended scope,
///    reflecting the real-world pattern where tokens are acquired for specific resource scopes
///
/// 3. Test Configuration - Allows ClientTests to configure different authentication scenarios
///    by providing tokens with specific claims (audience, roles, scopes) generated by TestJwtProvider
///
/// 4. Interface Compliance - Implements IAccessTokenProvider, which BaseClient uses to retrieve
///    tokens for authenticating requests, enabling consistent authentication patterns in tests
///
/// In the test flow:
/// - ClientTests creates tokens using TestJwtProvider with specific claims
/// - ClientTests passes these tokens to TestAccessTokenProvider instances
/// - TestClient1 uses these providers to authenticate requests to test endpoints
/// - The BaseClient automatically retrieves and applies these tokens during requests
///
/// This pattern allows tests to verify that tokens with specific claims are properly
/// handled by both the client and server sides of the authentication flow.
/// </summary>
internal class TestAccessTokenProvider(
    string scope,
    AccessToken accessToken)
    : IAccessTokenProvider
{
    /// <summary>
    /// Gets the scope for which this access token was intended.
    ///
    /// In OAuth 2.0/OpenID Connect flows, access tokens are typically requested for specific
    /// resource scopes. This property simulates that relationship by associating the token
    /// with a scope string like "Scope.trelnex-auth-amazon-tests-authentication-1".
    ///
    /// While this scope is not actively used in the current tests (the scope is already embedded
    /// in the token itself), maintaining this property:
    ///
    /// 1. Preserves the conceptual relationship between tokens and their intended scopes
    ///
    /// 2. Allows for potential future test enhancements where scope verification might occur
    ///    at the client level
    ///
    /// 3. Ensures full compliance with the IAccessTokenProvider interface contract
    ///
    /// In ClientTests, this is typically set to match the scope claim in the token
    /// created by TestJwtProvider.
    /// </summary>
    public string Scope => scope;

    /// <summary>
    /// Provides the pre-configured access token to clients for request authentication.
    ///
    /// This method is called by BaseClient when it needs to authenticate an HTTP request.
    /// The BaseClient extracts the token and adds it to the request's Authorization header.
    ///
    /// Unlike a real implementation that might:
    /// - Check token expiration and refresh if needed
    /// - Acquire new tokens if none exist
    /// - Handle token caching
    ///
    /// This test implementation simply returns the token it was constructed with,
    /// enabling tests to control exactly which token is used for each request.
    ///
    /// In ClientTests, this token comes from TestJwtProvider.Encode(), allowing tests
    /// to verify that tokens with specific claims (audience, roles, scopes) are
    /// correctly processed by both the client and the protected endpoints.
    /// </summary>
    /// <returns>The pre-configured AccessToken instance provided during construction.</returns>
    public AccessToken GetAccessToken() => accessToken;
}
